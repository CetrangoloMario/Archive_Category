   
    async def step_end(self, step_context: WaterfallStepContext) -> DialogTurnResult:
        lingua = step_context.result
        #print("lingua: ",lingua)
        #se option devo passare allo steo successuvi chiededno la compressione altrimento devo effettuare la traduzione del file
        if lingua == "no" or lingua == "No":
            return await step_context.prompt(
               ConfirmPrompt.__name__,
                PromptOptions(
                    prompt=MessageFactory.text("Non hai scelto la traduzione.... Desidera comprimere il file  (digita Yes o No)??") #aggiungere il controllo sul codice lingua
                ),
            )
        else:
            #prelevo il testo salvato nel file txt temporaneo 
            with open("./utilities/BlockDestination.txt","r") as fd:
                text = fd.read()
            """prelevare il testo tradotto e metterlo nel blob temporaneo insieme al file di partenza"""
            text_translate = self.translate(lingua,text)
            blob_client = self.blob_service_client.get_blob_client(container=self.container, blob="translate-"+self.blob)
            blob_client.upload_blob(text_translate)
            return await step_context.prompt(
               ConfirmPrompt.__name__,
                PromptOptions(
                    prompt=MessageFactory.text("Desidera comprimere il file (digita Yes o No)?") #aggiungere il controllo sul codice lingua
                ),
            )
        



    @staticmethod
    def translate(lingua, text):
        # Add your subscription key and endpoint
        subscription_key = CONFIG.AZURE_TRANSLATION_KEY
        endpoint = "https://api.cognitive.microsofttranslator.com"

        # Add your location, also known as region. The default is global.
        #This is required if using a Cognitive Services resource.
        location = "westeurope"

        path = '/translate'
        constructed_url = endpoint + path

        params = {
                'api-version': '3.0',
                'to': lingua
            }

        constructed_url = endpoint + path

        headers = {
                'Ocp-Apim-Subscription-Key': subscription_key,
                'Ocp-Apim-Subscription-Region': location,
                'Content-type': 'application/json',
                'X-ClientTraceId': str(uuid.uuid4())
            }

            # You can pass more than one object in body.
        body = [{
                'text': text
            }]

        request = requests.post(constructed_url, params=params, headers=headers, json=body)
        response = request.text
        data = json.loads(response)
        return data[0]["translations"][0]["text"]
        


